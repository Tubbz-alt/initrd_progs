#!/bin/sh
# functions library
# this is sourced from <app>_static/<awk>_static.petbuild

[ -f ./build.conf ] && build_conf='./build.conf'
[ -f ../build.conf ] && build_conf='../build.conf'
[ -f ../../build.conf ] && build_conf='../../build.conf' #*
[ -f ../../../build.conf ] && build_conf='../../../build.conf'
[ -f ../../../../build.conf ] && build_conf='../../../../build.conf'

if [ -f "$build_conf" ] ; then
	. ${build_conf}
else
	exit 1
fi

if [ -d "$MWD" ] ; then
	echo
	echo "main dir is $MWD" #MWD is set in build.sh
	echo
fi

function set_arch() {
	ARCH=`uname -m`
	[ "$OVERRIDE_ARCH" ] && ARCH=${OVERRIDE_ARCH}
	case $ARCH in
		*64) LIBDIR=lib64 ;;
		*) LIBDIR=lib ;;
	esac
}
set_arch

if [ -d "$XPATH" ] ; then #set in build.sh
	export PATH=${XPATH}/bin:$PATH # _configure _make _install
fi

#---------------------------------------------------------

function exit_error() {
	if [ "$HALT_ERRS" = "1" ] ; then #build.conf
		echo -n > $MWD/.fatal
	fi
	exit $@
}

function retrieve() {
	local SOURCE=${1}
	local FILE=$SOURCE
	case $SOURCE in http*|ftp*)
		local URL=${SOURCE%/*}
		local FILE=${SOURCE##*/}
	esac
	if [ -f ${MWD}/0sources/${FILE} ] ; then
		echo "Already downloaded ${FILE}"
		[ "$DLD_ONLY" = "1" ] && exit #build.conf
		cp -a ${MWD}/0sources/${FILE} .
	else
		echo "Downloading ${URL}/${FILE}"
		wget -c --no-check-certificate ${URL}/${FILE}
		if [ $? -ne 0 ] ; then
			rm -f ${FILE}
			exit_error 1
		fi
		mv -f ${FILE} ${MWD}/0sources
		[ "$DLD_ONLY" -eq 1 ] && exit #build.conf
	fi
}

function extract() {
	tfile="$@"
	if [ -f "$tfile" ] ; then
		tar -axf ${tfile}
	elif [ -f "${MWD}/0sources/$tfile" ] ; then
		tar -axf ${MWD}/0sources/${tfile}
	else
		echo "No such file: $tfile"
		exit_error 1
	fi
	if [ $? -ne 0 ] ; then
		[ -f "$tfile" ] && rm -f ${tfile}
		exit_error 1
	fi
	[ -f "$tfile" ] && mv -f ${tfile} ${MWD}/0sources
}

function abort_if_file_not_found() {
	[ "$1" ] || exit_error 1
	for i in "$@" ; do
		if [ ! -f "$i" ] ; then
			echo "$i: file does no exist!"
			exit_error 1
		fi
	done
}

#---------------------------------------------------------

function hl_echo() {
	echo
	echo '------------------------------'
	echo "$@"
	echo '------------------------------'
	echo
}

function _cflags() {
	echo "-g -Os" #-fmerge-all-constants -fno-unroll-loops -fomit-frame-pointer -ffunction-sections -fdata-sections"
}

function make_sh() {
	#script can not overwrite itself
	if [ "$MAKE_SCRIPT" != "1" ] ; then
		echo "#!/bin/sh" > make.sh
		echo "export MAKE_SCRIPT=1" >> make.sh
		[ -d "$XPATH" ] && echo "export XPATH=$XPATH" >> make.sh
		echo ". $MWD/func" >> make.sh
		echo "_make $@" >> make.sh
		chmod +x make.sh
	fi
}

#this is inside the source dir
function _configure() {
	unset host
	if [ -f configure ] ; then
		#this is to avoid possible problems with the triplet
		#true for aboriginal linux cross compiler
		sed -i  -e 's|^build_os=.*|build_os=linux|' \
				-e 's|^host_os=.*|host_os=linux|' \
				-e 's|^target_os=.*|target_os=linux|' \
				-e 's|linux_os=no|linux_os=yes|' \
				configure
	fi
	if [ -d "$XPATH" ] ; then
		echo "PATH: $PATH"
		host="--host=${ARCH}"
	fi
	hl_echo "./configure ${opts} ${host}"
	./configure ${opts} ${host} #opts is set in the calling script
	[ $? -ne 0 ] && exit_error 1
}

#this is inside the source dir
function _make() {
	cf=$(_cflags)
	if [ -f Makefile ] ; then
		makefiles=$(find . -type f -name Makefile | tr '\n' ' ')
		sed -i "s|\(^CFLAGS =.*\)|\1 $cf|g"  ${makefiles}
		hl_echo "$(grep '^CFLAGS = ' $makefiles)"
	else
		export CFLAGS="$cf"
	fi
	[ "$1" = "make" ] && shift
	if [ "$1" = "" ] ; then #no args
		if [ -d "$XPATH" ] ; then #musl
			echo "PATH: $PATH"
			mkstr="${MKFLG} CC=${ARCH}-gcc LD=${ARCH}-ld AR=${ARCH}-ar RANLIB=${ARCH}-ranlib NM=${ARCH}-nm LDFLAGS=-static"
			hl_echo "make $mkstr"
			make_sh "make $mkstr"
			make $mkstr
		else # system gcc
			mkstr "LDFLAGS=-static CFLAGS=-static"
			hl_echo "make $mkstr"
			make_sh "make $mkstr"
			make $mkstr
		fi
	else
		hl_echo "make $@"
		make_sh "make $@"
		make $@
	fi
	return $?
}

#this is inside the source dir
function _install() {
	local file="$1" dest="$2"
	#[ -f "$file" ] || exit_error 1
	if [ -d "$XPATH" ] ; then
		${ARCH}-strip --strip-all "$file" #--strip-unneeded
	else
		strip --strip-all "$file"
	fi
	chmod +x "$file"
	cp "$file" "$dest"
	file $file | grep -E 'dynamically|shared' && {
		echo "$file is not static..!"
		exit_error 1
	}

}

### END ###
