#!/bin/sh
# functions library
# this is run from  <app>_static

. ../build.conf
echo
echo "main dir is $MWD"
echo

ARCH=`uname -m`
case $ARCH in
	arm*) ARCH=armv6l ;; # newest supported
	*)    ARCH=$ARCH ;;
esac
[ "$OVERRIDE_ARCH" ] && ARCH=${OVERRIDE_ARCH}

function retrieve() {
	SRCS=${1%% *}
	WC=`echo "$1" | wc -w`
	[ "$WC" -eq 2 ] && CERT=${1##* }
	if [ -f ../0sources/${SRCS} ] ; then
		[ "$DLD_ONLY" -eq 1 ] && exit #build.conf
		cp -a ../0sources/${SRCS} .
	else
		wget -c --no-check-certificate ${URL}/${SRCS} $CERT
		if [ $? -ne 0 ] ; then
			rm -f ${SRCS}
			exit_error 1
		fi
		mv -f ${SRCS} ../0sources
		[ "$DLD_ONLY" -eq 1 ] && exit #build.conf
	fi
}

function extract() {
	tfile="$@"
	if [ -f "$tfile" ] ; then
		tar -axf ${tfile}
	elif [ -f "../0sources/$tfile" ] ; then
		tar -axf ../0sources/${tfile}
	else
		echo "No such file: $tfile"
		exit_error 1
	fi
	if [ $? -ne 0 ] ; then
		[ -f "$tfile" ] && rm -f ${tfile}
		exit_error 1
	fi
	[ -f "$tfile" ] && mv -f ${tfile} ../0sources
}

function configure_force_linux_os() { #this is inside the source dir
	#this is to avoid possible problems with the triplet
	#true for aboriginal linux cross compiler
	sed -i  -e 's|^build_os=.*|build_os=linux|' \
			-e 's|^host_os=.*|host_os=linux|' \
			-e 's|^target_os=.*|target_os=linux|' \
			-e 's|linux_os=no|linux_os=yes|' \
			configure
}

function exit_error() {
	if [ "$HALT_ERRS" = "1" ] ; then #build.conf
		echo -n > $MWD/.fatal
	fi
	exit $@
}

############################################################################
#					LOCAL MUSL COMPILER (tool chain)
############################################################################

function compiler_flag() {
	. /etc/DISTRO_SPECS
	MUSL_GCC="$(which musl-gcc 2>/dev/null)"
	if [ -x "$MUSL_GCC" ] ; then
		export CC="musl-gcc -static"
		if [ "$DISTRO_BINARY_COMPAT" = "slackware" ] ; then
			case $ARCH in
				*64) host=x86_64-slackware-linux ;; #tested in slacko 6.3.0
				*) host=i486-slackware-linux ;;     #tested in slacko 6.3.0
			esac
		else
			echo "Need core here: ($0) - compiler_flag()"
		fi
	else
		echo "Need core here: ($0) - compiler_flag()"
	fi
}

function make_build() {
	MUSL_GCC="$(which musl-gcc 2>/dev/null)"
	if [ -x "$MUSL_GCC" ] ; then
		make CC="musl-gcc -static"
	else
		make CC="gcc --static" ${MKFLG} "$@" ## func
	fi
}

### END ###